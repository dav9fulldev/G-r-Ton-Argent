import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/foundation.dart';
import '../models/transaction_model.dart';
import '../models/user_model.dart'; // Added import for UserModel

class GeminiService extends ChangeNotifier {
  static const String _baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';
  static const String _apiKey = 'AIzaSyDSi9hzAndIPYi3S2MaxO40RT6odd6bBHw';

  Future<String> sendMessage({
    required String userMessage,
    required String userName,
    required double monthlyBudget,
    required double totalIncome,
    required double totalExpenses,
    required double currentBalance,
    List<TransactionModel>? recentTransactions,
    List<String>? conversationHistory,
  }) async {
    try {
      final user = UserModel(
        uid: 'temp_uid',
        name: userName, 
        monthlyBudget: monthlyBudget,
        email: '',
        createdAt: DateTime.now(),
        aiAdviceEnabled: true,
      );
      final context = _buildContext(user, recentTransactions ?? [], userMessage, conversationHistory ?? []);

      // Construire l'historique de conversation
      String conversationText = '';
      if (conversationHistory != null && conversationHistory.isNotEmpty) {
        conversationText = '\n\nHISTORIQUE DE LA CONVERSATION:\n';
        for (final message in conversationHistory) {
          conversationText += 'Assistant: $message\n';
        }
      }

      // Message optimis√© avec historique
      final fullMessage = '''Tu es un conseiller financier de l'application G√®rTonArgent. 

CONTEXTE: $context$conversationText

MESSAGE UTILISATEUR: $userMessage

R√àGLES IMPORTANTES:
- Utilise SEULEMENT le pr√©nom (pas le nom complet)
- Ne r√©p√®te PAS les informations d√©j√† donn√©es
- Va directement au sujet sans redire ce qui a d√©j√† √©t√© dit
- Sois direct et concis (1-2 phrases max)
- Donne des conseils concrets et des alternatives
- Consid√®re l'historique de la conversation pour √©viter la r√©p√©tition
- Si l'utilisateur dit "impulsif" ‚Üí Propose directement des alternatives
- Si l'utilisateur demande des conseils ‚Üí Donne des suggestions sp√©cifiques
- Si l'utilisateur tape un nombre seul ‚Üí Demande confirmation "X FCFA ?"
- Si l'utilisateur dit "bye", "au revoir", "merci" ‚Üí Propose de fermer le chatbot

R√âPONSE:''';

      if (kDebugMode) {
        print('=== REQU√äTE GEMINI ===');
        print('URL: $_baseUrl?key=${_apiKey.substring(0, 10)}...');
        print('Message complet: $fullMessage');
        print('Body JSON: ${jsonEncode({
          'contents': [
            {
              'parts': [
                {
                  'text': fullMessage,
                }
              ]
            }
          ]
        })}');
        print('=== FIN REQU√äTE ===');
      }

      final response = await http.post(
        Uri.parse('$_baseUrl?key=$_apiKey'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'contents': [
            {
              'parts': [
                {
                  'text': fullMessage,
                }
              ]
            }
          ]
        }),
      ).timeout(const Duration(seconds: 30));

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        
        if (kDebugMode) {
          print('R√©ponse API Gemini: ${response.body}');
        }
        
        if (data['candidates'] != null && 
            data['candidates'].isNotEmpty && 
            data['candidates'][0]['content'] != null &&
            data['candidates'][0]['content']['parts'] != null &&
            data['candidates'][0]['content']['parts'].isNotEmpty) {
          
          final responseText = data['candidates'][0]['content']['parts'][0]['text'];
          if (kDebugMode) {
            print('=== R√âPONSE GEMINI ===');
            print('Texte de r√©ponse: $responseText');
            print('=== FIN R√âPONSE ===');
          }
          return responseText;
        } else {
          if (kDebugMode) {
            print('Structure de r√©ponse invalide: $data');
          }
          throw Exception('R√©ponse invalide de l\'API Gemini');
        }
      } else {
        if (kDebugMode) {
          print('Erreur HTTP: ${response.statusCode}');
          print('Corps de r√©ponse: ${response.body}');
        }
        throw Exception('Erreur API: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      if (kDebugMode) {
        print('Erreur Gemini API: $e');
        print('URL: $_baseUrl?key=${_apiKey.substring(0, 10)}...');
        print('Message: $userMessage');
      }
      
      // Fallback temporaire pour tester
      return 'D√©sol√©, l\'API ne fonctionne pas actuellement. Erreur: $e';
    }
  }

  String _buildContext(UserModel user, List<TransactionModel> transactions, String userMessage, List<String> conversationHistory) {
    final firstName = user.name.split(' ').last;
    final totalExpenses = transactions.where((t) => t.type == TransactionType.expense).fold(0.0, (sum, t) => sum + t.amount);
    final totalIncome = transactions.where((t) => t.type == TransactionType.income).fold(0.0, (sum, t) => sum + t.amount);
    final balance = totalIncome - totalExpenses;
    final budgetRemaining = user.monthlyBudget - totalExpenses;
    final budgetPercentage = user.monthlyBudget > 0 ? (totalExpenses / user.monthlyBudget) * 100 : 0;

    // Analyser le message utilisateur pour d√©tecter l'intention
    final userMessageLower = userMessage.toLowerCase();
    final isEndingConversation = userMessageLower.contains('merci') || 
                                userMessageLower.contains('ok') || 
                                userMessageLower.contains('d\'accord') ||
                                userMessageLower.contains('fin') ||
                                userMessageLower.contains('termin√©') ||
                                userMessageLower.contains('fermer');

    // Construire l'historique de conversation
    final conversationContext = conversationHistory.isNotEmpty 
        ? '\nHISTORIQUE DE CONVERSATION:\n${conversationHistory.join('\n')}'
        : '';

    return '''
Tu es l'assistant financier intelligent de l'application G√®rTonArgent.

INFORMATIONS UTILISATEUR:
- Pr√©nom: $firstName
- Budget mensuel: ${user.monthlyBudget} FCFA
- D√©penses d√©j√† effectu√©es: ${totalExpenses.toStringAsFixed(0)} FCFA (${budgetPercentage.toStringAsFixed(1)}% du budget)
- Budget restant: ${budgetRemaining.toStringAsFixed(0)} FCFA
- Solde actuel: ${balance.toStringAsFixed(0)} FCFA

TRANSACTIONS R√âCENTES:
${transactions.take(3).map((t) => '- ${t.amount} FCFA pour ${_getCategoryName(t.category)} (${t.type.name})').join('\n')}

R√àGLES DE CONVERSATION STRICTES:
1. Utilise SEULEMENT le pr√©nom "$firstName" (jamais le nom complet)
2. Ne r√©p√®te JAMAIS les informations d√©j√† donn√©es dans la conversation
3. Va directement au sujet sans redire ce qui a d√©j√† √©t√© dit
4. Sois direct et concis (1-2 phrases maximum)
5. Pose des questions ou donne des conseils concrets
6. √âvite les salutations r√©p√©titives

GESTION DE LA FIN DE CONVERSATION:
- Si l'utilisateur dit "merci", "ok", "d'accord", "fin", "termin√©" ‚Üí R√©ponds simplement "Parfait ! N'h√©sitez pas si vous avez d'autres questions." et arr√™te la conversation
- Si l'utilisateur dit "fermer" ‚Üí R√©ponds "Au revoir !" et arr√™te la conversation
- Ne pose JAMAIS de questions apr√®s que l'utilisateur ait exprim√© sa satisfaction

LOGIQUE DE CONVERSATION:
- Si l'utilisateur confirme que c'est n√©cessaire ‚Üí Donne des conseils d'optimisation
- Si l'utilisateur dit que c'est impulsif ‚Üí Propose des alternatives
- Si l'utilisateur demande des alternatives ‚Üí Donne des suggestions concr√®tes
- Si l'utilisateur exprime sa satisfaction ‚Üí Termine la conversation poliment

$conversationContext

MESSAGE UTILISATEUR: $userMessage

R√âPONSE:''';
  }

   String _getCategoryName(TransactionCategory category) {
    switch (category) {
      case TransactionCategory.food:
        return 'Nourriture';
      case TransactionCategory.transport:
        return 'Transport';
      case TransactionCategory.entertainment:
        return 'Divertissement';
      case TransactionCategory.health:
        return 'Sant√©';
      case TransactionCategory.shopping:
        return 'Shopping';
      case TransactionCategory.utilities:
        return 'Factures';
      case TransactionCategory.education:
        return '√âducation';
      case TransactionCategory.salary:
        return 'Salaire';
      case TransactionCategory.freelance:
        return 'Freelance';
      case TransactionCategory.investment:
        return 'Investissement';
      case TransactionCategory.other:
        return 'Autre';
    }
  }

  String _generateFallbackResponse(String userMessage) {
    final lowerMessage = userMessage.toLowerCase();
    
    // R√©ponses intelligentes bas√©es sur le contenu du message
    if (lowerMessage.contains('impulsif') || lowerMessage.contains('impulsive')) {
      return 'üí° Achat impulsif d√©tect√© ! Pour √©conomiser, attendez 24h avant d\'acheter. Si vous y pensez encore, c\'est peut-√™tre n√©cessaire. Sinon, vous venez d\'√©conomiser !';
    }
    
    if (lowerMessage.contains('transport') || lowerMessage.contains('voiture') || lowerMessage.contains('taxi')) {
      return 'üöå Alternatives √©conomiques : marche (gratuit), bus (200-500 FCFA), covoiturage. Vous √©conomiserez 70-90% !';
    }
    
    if (lowerMessage.contains('nourriture') || lowerMessage.contains('restaurant') || lowerMessage.contains('manger')) {
      return 'üçΩÔ∏è Conseils : cuisinez √† la maison (√©conomisez 60%), achetez en gros, √©vitez les restaurants. Budget alimentaire recommand√© : 30% max.';
    }
    
    if (lowerMessage.contains('n√©cessaire') || lowerMessage.contains('besoin')) {
      return '‚úÖ Si c\'est vraiment n√©cessaire, allez-y ! Mais v√©rifiez : pouvez-vous l\'emprunter ? L\'acheter d\'occasion ? Attendre les soldes ?';
    }
    
    if (lowerMessage.contains('attendre') || lowerMessage.contains('plus tard')) {
      return '‚è∞ Excellente d√©cision ! En attendant, mettez cet argent de c√¥t√©. Vous verrez si vous en avez vraiment besoin plus tard.';
    }
    
    if (lowerMessage.contains('budget') || lowerMessage.contains('impact')) {
      return 'üìä R√®gle d\'or : d√©pensez max 30% de votre budget restant par achat. Au-del√†, r√©fl√©chissez bien !';
    }
    
    if (lowerMessage.contains('quoi') && lowerMessage.contains('exemple')) {
      return 'üç≥ Exemples concrets : 1) Pr√©parez vos repas le dimanche (√©conomisez 2000 FCFA/semaine), 2) Achetez les l√©gumes au march√© local (50% moins cher), 3) Utilisez les restes pour le lendemain. Voulez-vous que je vous aide √† planifier ?';
    }
    
    if (lowerMessage.contains('ok') || lowerMessage.contains('d\'accord')) {
      return 'üëç Parfait ! Maintenant, posez-vous ces questions : 1) Puis-je vivre sans cet achat ? 2) Y a-t-il une alternative moins ch√®re ? 3) Puis-je attendre ? Votre r√©ponse ?';
    }
    
    if (lowerMessage.contains('oui') && lowerMessage.contains('n√©cessaire')) {
      return '‚úÖ D\'accord, si c\'est vraiment n√©cessaire ! Mais avant d\'acheter, v√©rifiez : 1) Prix compar√©s ? 2) Promotions en cours ? 3) Qualit√©/prix optimal ? Voulez-vous que je vous aide √† optimiser cet achat ?';
    }
    
    if (lowerMessage.contains('non') || lowerMessage.contains('pas n√©cessaire')) {
      return 'üéâ Excellente d√©cision ! Vous venez d\'√©conomiser ! Mettez cet argent de c√¥t√© pour un objectif important. Voulez-vous que je vous aide √† d√©finir un objectif d\'√©pargne ?';
    }
    
    // R√©ponse par d√©faut
    return 'üí≠ R√©fl√©chissez : cette d√©pense vous apporte-t-elle vraiment de la valeur ? Pouvez-vous la reporter ou la r√©duire ? Votre budget vous remerciera !';
  }
}
