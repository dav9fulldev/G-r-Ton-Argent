import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import '../models/transaction_model.dart';
import '../config/api_keys.dart';
import '../utils/category_utils.dart';

class GeminiService extends ChangeNotifier {
  // Configuration pour l'API Gemini
  static const String _baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';
  
  // Cl√© API r√©cup√©r√©e depuis le fichier de configuration s√©curis√©
  static String get _apiKey => ApiKeys.geminiApiKey;
  
  bool _isLoading = false;
  String? _error;

  bool get isLoading => _isLoading;
  String? get error => _error;

  /// Fonction centrale pour obtenir une analyse conversationnelle IA via Gemini
  /// Cette fonction simule une conversation avec un conseiller financier
  Future<Map<String, dynamic>> analyserDepense(double budget, double depenses, double nouvelleDepense, {TransactionCategory? category, String? userChoice}) async {
    _setLoading(true);
    _clearError();

    try {
      // Si l'utilisateur a choisi une option avec prix sp√©cifique, utiliser directement la r√©ponse contextuelle
      if (userChoice != null && userChoice.contains('(') && userChoice.contains('FCFA')) {
        return _getContextualResponse(budget, depenses, nouvelleDepense, category, userChoice);
      }
      
      // Sinon, utiliser Gemini pour les choix g√©n√©riques ou l'analyse initiale
      final prompt = _buildConversationPrompt(budget, depenses, nouvelleDepense, category, userChoice);
      final response = await _callGemini(prompt);
      return _parseChatbotResponse(response, budget, depenses, nouvelleDepense, category, userChoice: userChoice);
    } catch (e) {
      _setError('Erreur lors de la g√©n√©ration des conseils: $e');
      // Retourner une analyse par d√©faut en cas d'erreur
      return _getDefaultChatbotResponse(budget, depenses, nouvelleDepense, category);
    } finally {
      _setLoading(false);
    }
  }

     /// Construit le prompt conversationnel pour Gemini
   String _buildConversationPrompt(double budget, double depenses, double nouvelleDepense, TransactionCategory? category, String? userChoice) {
    final totalApresDepense = depenses + nouvelleDepense;
    final pourcentageBudget = (totalApresDepense / budget) * 100;
    final resteBudget = budget - totalApresDepense;

         final categoryInfo = category != null ? '\nCat√©gorie de d√©pense : ${_getCategoryName(category)}' : '';
     final userChoiceInfo = userChoice != null ? '\n\nL\'utilisateur a choisi : "$userChoice"' : '';

         return '''
Tu es un conseiller financier personnel expert, sp√©cialis√© dans la gestion de budget en C√¥te d'Ivoire. Tu as une personnalit√© chaleureuse et bienveillante, comme un ami qui veut le meilleur pour son ami.

L'utilisateur s'appr√™te √† faire une d√©pense de ${nouvelleDepense.toStringAsFixed(0)} FCFA.${categoryInfo}${userChoiceInfo}

Voici sa situation financi√®re actuelle :
- Budget mensuel : ${budget.toStringAsFixed(0)} FCFA
- D√©penses d√©j√† effectu√©es : ${depenses.toStringAsFixed(0)} FCFA
- Apr√®s cette d√©pense : ${totalApresDepense.toStringAsFixed(0)} FCFA (${pourcentageBudget.toStringAsFixed(1)}% du budget)
- Reste du budget : ${resteBudget.toStringAsFixed(0)} FCFA

**Ton r√¥le** : R√©pondre intelligemment selon le choix de l'utilisateur et calculer les √©conomies r√©alis√©es.

**Format de r√©ponse requis** :
R√©ponds EXACTEMENT dans ce format :

MESSAGE: [message intelligent et sp√©cifique au choix de l'utilisateur, max 2-3 phrases]
OPTIONS: [3-4 nouvelles options logiques selon le contexte, s√©par√©es par des virgules]

**Logique de r√©ponse selon le choix** :

**IMPORTANT : Distingue les types de choix** :

1. **Choix avec prix sp√©cifique** (ex: "Gbaka (300 FCFA)") ‚Üí Actions finales
2. **Choix g√©n√©rique** (ex: "Chercher moins cher") ‚Üí Plus d'alternatives

**Si l'utilisateur choisit une option avec prix sp√©cifique** :
- Calcule l'√©conomie : Montant initial - Prix choisi
- F√©licite pour le bon choix
- Propose des actions finales : "Enregistrer (X FCFA)", "Modifier le montant", "Fermer"

**Si l'utilisateur choisit une option g√©n√©rique** :
- Propose plus d'alternatives sp√©cifiques avec prix

**Exemples de r√©ponses intelligentes** :

**TRANSPORT - Choix avec prix** :
- Si "Gbaka (300 FCFA)" : "üöê Super choix ! Le Gbaka √† 300 FCFA est √©conomique. Tu as √©conomis√© ${(nouvelleDepense - 300).toStringAsFixed(0)} FCFA !"
- Si "Bus (200 FCFA)" : "üöå Parfait ! Le bus √† 200 FCFA est un excellent choix. Tu √©conomiseras ${(nouvelleDepense - 200).toStringAsFixed(0)} FCFA !"

**NOURRITURE - Choix avec prix** :
- Si "Street food (1500 FCFA)" : "üçú Excellente id√©e ! La street food √† 1500 FCFA est d√©licieuse et √©conomique. Tu √©conomiseras ${(nouvelleDepense - 1500).toStringAsFixed(0)} FCFA !"
- Si "Cuisine maison (800 FCFA)" : "üë®‚Äçüç≥ Brillant ! Cuisiner √† la maison √† 800 FCFA est sain et √©conomique. Tu √©conomiseras ${(nouvelleDepense - 800).toStringAsFixed(0)} FCFA !"

**ACHATS - Choix avec prix** :
- Si "March√© populaire (√©conomies 40%)" : "üõçÔ∏è Parfait ! Le march√© populaire offre de bonnes affaires. Tu √©conomiseras ${(nouvelleDepense * 0.4).toStringAsFixed(0)} FCFA !"
- Si "Achat group√© (√©conomies 25%)" : "üë• Super id√©e ! L'achat group√© permet de partager les co√ªts. Tu √©conomiseras ${(nouvelleDepense * 0.25).toStringAsFixed(0)} FCFA !"

**DIVERTISSEMENT - Choix avec prix** :
- Si "Parc public (0 FCFA)" : "üå≥ Excellente id√©e ! Le parc public est agr√©able et gratuit. Tu √©conomiseras ${nouvelleDepense.toStringAsFixed(0)} FCFA !"
- Si "√âv√©nement local (2000 FCFA)" : "üéâ Parfait ! L'√©v√©nement local √† 2000 FCFA est convivial. Tu √©conomiseras ${(nouvelleDepense - 2000).toStringAsFixed(0)} FCFA !"

**SANT√â - Choix avec prix** :
- Si "Pharmacie populaire (√©conomies 30%)" : "üíä Bon choix ! La pharmacie populaire offre des prix abordables. Tu √©conomiseras ${(nouvelleDepense * 0.3).toStringAsFixed(0)} FCFA !"
- Si "Consultation gratuite (0 FCFA)" : "üë®‚Äç‚öïÔ∏è Sage choix ! La consultation gratuite te permet de te soigner sans co√ªt. Tu √©conomiseras ${nouvelleDepense.toStringAsFixed(0)} FCFA !"

**TRANSPORT - Choix g√©n√©rique** :
- Si "Chercher moins cher" : "üí° Voici d'autres options √©conomiques :"
- Options : "Taxi (600-1000 FCFA)", "Moto (500-800 FCFA)", "Woro-woro (400-700 FCFA)", "Marcher (0 FCFA)"

**NOURRITURE - Choix g√©n√©rique** :
- Si "Chercher moins cher" : "üçΩÔ∏è Voici d'autres options pour √©conomiser :"
- Options : "Street food (1000-2000 FCFA)", "Cantine populaire (800-1500 FCFA)", "March√© local (500-1200 FCFA)", "Cuisine maison (300-800 FCFA)"

**R√®gles** :
- Si le choix contient "(X FCFA)" ‚Üí Actions finales
- Si le choix est g√©n√©rique ‚Üí Plus d'alternatives
- Calcule TOUJOURS l'√©conomie r√©alis√©e
- Sois encourageant et f√©licite le bon choix
- Utilise des emojis appropri√©s
''';
  }

  /// Appelle Gemini via HTTP
  Future<String> _callGemini(String prompt) async {
    try {
      // V√©rifier si la cl√© API est configur√©e
      if (!ApiKeys.isGeminiConfigured) {
        throw Exception('Cl√© API Gemini non configur√©e. Utilisation des conseils par d√©faut.');
      }

      final response = await http.post(
        Uri.parse('$_baseUrl?key=$_apiKey'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'contents': [
            {
              'parts': [
                {
                  'text': prompt,
                },
              ],
            },
          ],
          'generationConfig': {
            'temperature': 0.8,
            'topK': 50,
            'topP': 0.9,
            'maxOutputTokens': 400,
          },
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final candidates = data['candidates'] as List;
        if (candidates.isNotEmpty) {
          final content = candidates[0]['content'];
          final parts = content['parts'] as List;
          if (parts.isNotEmpty) {
            return parts[0]['text'] as String;
          }
        }
        throw Exception('R√©ponse invalide de Gemini');
      } else {
        throw Exception('Erreur API: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      throw Exception('Erreur lors de l\'appel √† Gemini: $e');
    }
  }



          /// Parse la r√©ponse de Gemini pour le chatbot
    Map<String, dynamic> _parseChatbotResponse(String response, double budget, double depenses, double nouvelleDepense, TransactionCategory? category, {String? userChoice}) {
      try {
        final lines = response.split('\n');
        String message = '';
        List<String> options = [];
        
        for (final line in lines) {
          final trimmedLine = line.trim();
          if (trimmedLine.startsWith('MESSAGE:')) {
            message = trimmedLine.substring(8).trim();
          } else if (trimmedLine.startsWith('OPTIONS:')) {
            final optionsText = trimmedLine.substring(8).trim();
            options = optionsText.split(',').map((e) => e.trim()).toList();
          }
        }
        
        // Si le parsing √©choue, utiliser la r√©ponse contextuelle ou par d√©faut
        if (message.isEmpty) {
          if (userChoice != null) {
            return _getContextualResponse(budget, depenses, nouvelleDepense, category, userChoice);
          } else {
            return _getDefaultChatbotResponse(budget, depenses, nouvelleDepense, category);
          }
        }
        
        return {
          'message': message,
          'options': options.isNotEmpty ? options : ['Continuer', 'Chercher moins cher', 'Reporter'],
        };
      } catch (e) {
        if (userChoice != null) {
          return _getContextualResponse(budget, depenses, nouvelleDepense, category, userChoice);
        } else {
          return _getDefaultChatbotResponse(budget, depenses, nouvelleDepense, category);
        }
      }
    }

       /// R√©ponse par d√©faut pour le chatbot
    Map<String, dynamic> _getDefaultChatbotResponse(double budget, double depenses, double nouvelleDepense, TransactionCategory? category) {
     final totalApresDepense = depenses + nouvelleDepense;
     final pourcentageBudget = (totalApresDepense / budget) * 100;
     final resteBudget = budget - totalApresDepense;

     final pourcentageDepense = (nouvelleDepense / budget) * 100;
     final categoryName = category != null ? CategoryUtils.getCategoryName(category) : 'cette d√©pense';
     
     // Message court et direct
     String message = 'Hey ! üëã ${nouvelleDepense.toStringAsFixed(0)} FCFA pour $categoryName, c\'est ${pourcentageDepense.toStringAsFixed(1)}% de ton budget. ';
     
     if (nouvelleDepense > budget * 0.3) {
       message += 'C\'est important ! ü§î';
     } else if (nouvelleDepense > budget * 0.15) {
       message += 'C\'est significatif ! üí∞';
     } else {
       message += 'C\'est raisonnable ! ‚úÖ';
     }
     
     // Options contextuelles selon la cat√©gorie
     List<String> options = [];
     
     if (category != null) {
       switch (category) {
         case TransactionCategory.transport:
           if (nouvelleDepense > 2000) {
             options = ['Prendre gbaka (150-300 FCFA)', 'Bus (200-400 FCFA)', 'Marche √† pied', 'Covoiturage'];
           } else {
             options = ['Continuer', 'Comparer les prix', 'Voir alternatives'];
           }
           break;
         case TransactionCategory.food:
           if (nouvelleDepense > 5000) {
             options = ['March√© local', 'Cuisine maison', 'Restaurant populaire', 'Street food'];
           } else {
             options = ['Continuer', 'Optimiser', 'Voir conseils'];
           }
           break;
         case TransactionCategory.shopping:
           if (nouvelleDepense > 8000) {
             options = ['March√© populaire', 'N√©gocier le prix', 'Attendre les soldes', 'Achat group√©'];
           } else {
             options = ['Continuer', 'Chercher moins cher', 'Voir alternatives'];
           }
           break;
         case TransactionCategory.entertainment:
           if (nouvelleDepense > 7000) {
             options = ['Activit√© gratuite', 'Parc public', '√âv√©nement local', 'Jeux √† la maison'];
           } else {
             options = ['Continuer', 'Optimiser', 'Voir conseils'];
           }
           break;
         case TransactionCategory.health:
           options = ['Continuer', 'Pharmacie populaire', 'Mutuelle', 'Consultation gratuite'];
           break;
         default:
           if (nouvelleDepense > budget * 0.3) {
             options = ['Reporter', 'Chercher moins cher', 'Continuer quand m√™me'];
           } else if (nouvelleDepense > budget * 0.15) {
             options = ['Continuer', 'Chercher moins cher', 'Voir alternatives'];
           } else {
             options = ['Continuer', 'Optimiser', 'Voir conseils'];
           }
       }
     } else {
       if (nouvelleDepense > budget * 0.3) {
         options = ['Reporter', 'Chercher moins cher', 'Continuer quand m√™me'];
       } else if (nouvelleDepense > budget * 0.15) {
         options = ['Continuer', 'Chercher moins cher', 'Voir alternatives'];
       } else {
         options = ['Continuer', 'Optimiser', 'Voir conseils'];
       }
     }
     
     return {
       'message': message,
       'options': options,
     };
   }

                 /// R√©ponse contextuelle selon le choix de l'utilisateur
    Map<String, dynamic> _getContextualResponse(double budget, double depenses, double nouvelleDepense, TransactionCategory? category, String userChoice) {
      String message = '';
      List<String> options = [];
      
      // V√©rifier si c'est un choix avec prix sp√©cifique (choix final)
      final hasSpecificPrice = userChoice.contains('(') && userChoice.contains('FCFA');
      
      if (hasSpecificPrice) {
        // Choix avec prix sp√©cifique ‚Üí Actions finales (peu importe l'√©tape)
        final priceMatch = RegExp(r'\((\d+)\s*FCFA\)').firstMatch(userChoice);
        final price = priceMatch != null ? int.parse(priceMatch.group(1)!) : 0;
        final economie = nouvelleDepense - price;
        
        // R√©ponses intelligentes et naturelles par cat√©gorie
        if (category == TransactionCategory.transport) {
          if (userChoice.contains('gbaka') || userChoice.contains('Gbaka')) {
            message = 'üöê Ah parfait ! Le gbaka √† $price FCFA, c\'est vraiment le bon choix ! Tu vas √©conomiser ${economie.toStringAsFixed(0)} FCFA et en plus c\'est rapide. Bravo pour cette d√©cision intelligente !';
          } else if (userChoice.contains('bus') || userChoice.contains('Bus')) {
            message = 'üöå Excellente id√©e ! Le bus √† $price FCFA, c\'est √©conomique et pratique. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu contribues √† l\'environnement. Continue comme √ßa !';
          } else if (userChoice.contains('woro') || userChoice.contains('Woro')) {
            message = 'üöê Super choix ! Le woroworo √† $price FCFA, c\'est vraiment une option viable. Tu as √©conomis√© ${economie.toStringAsFixed(0)} FCFA par rapport √† un trajet plus cher ! Bravo pour ta gestion budg√©taire !';
          } else if (userChoice.contains('taxi') || userChoice.contains('Taxi')) {
            message = 'üöï Pas mal ! Le taxi √† $price FCFA, c\'est confortable et rapide. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu arrives √† l\'heure. Bon compromis !';
          } else if (userChoice.contains('moto') || userChoice.contains('Moto')) {
            message = 'üèçÔ∏è Bon choix ! La moto √† $price FCFA, c\'est rapide et pratique. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA !';
          } else if (userChoice.contains('marche') || userChoice.contains('Marche') || userChoice.contains('0 FCFA')) {
            message = 'üö∂‚Äç‚ôÇÔ∏è G√©nial ! Marcher, c\'est gratuit et c\'est excellent pour la sant√©. Tu √©conomises ${nouvelleDepense.toStringAsFixed(0)} FCFA et tu fais de l\'exercice. Double b√©n√©fice !';
          }
        } else if (category == TransactionCategory.food) {
          if (userChoice.contains('street') || userChoice.contains('Street')) {
            message = 'üçú Excellente id√©e ! La street food √† $price FCFA, c\'est d√©licieux et authentique. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu d√©couvres la vraie cuisine locale. Parfait !';
          } else if (userChoice.contains('cantine') || userChoice.contains('Cantine')) {
            message = 'üçΩÔ∏è Super choix ! La cantine populaire √† $price FCFA, c\'est vraiment un bon rapport qualit√©-prix. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu manges √©quilibr√©. Continue comme √ßa !';
          } else if (userChoice.contains('march√©') || userChoice.contains('March√©') || userChoice.contains('local')) {
            message = 'ü•¨ Brillant ! Le march√© local √† $price FCFA, c\'est frais et √©conomique. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu soutiens les producteurs locaux. Tr√®s malin !';
          } else if (userChoice.contains('cuisine') || userChoice.contains('Cuisine') || userChoice.contains('maison')) {
            message = 'üë®‚Äçüç≥ Fantastique ! Cuisiner √† la maison √† $price FCFA, c\'est sain et √©conomique. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu ma√Ætrises ce que tu manges. Excellente d√©cision !';
          } else if (userChoice.contains('restaurant') || userChoice.contains('Restaurant')) {
            message = 'üç¥ Pas mal ! Le restaurant √† $price FCFA, c\'est agr√©able pour se faire plaisir. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu passes un bon moment. Bon √©quilibre !';
          }
        } else if (category == TransactionCategory.shopping) {
          if (userChoice.contains('march√©') || userChoice.contains('March√©') || userChoice.contains('populaire')) {
            message = 'üõçÔ∏è Super strat√©gie ! Le march√© populaire √† $price FCFA, c\'est vraiment malin. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu trouves des bonnes affaires. Continue comme √ßa !';
          } else if (userChoice.contains('achat') || userChoice.contains('gros')) {
            message = 'üì¶ Excellente strat√©gie ! L\'achat en gros √† $price FCFA, c\'est intelligent pour √©conomiser √† long terme. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu as des r√©serves. Tr√®s bien pens√© !';
          } else if (userChoice.contains('group√©') || userChoice.contains('Group√©')) {
            message = 'üë• G√©nial ! L\'achat group√© √† $price FCFA, c\'est une excellente id√©e. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu partages les co√ªts avec d\'autres. Tr√®s malin !';
          } else if (userChoice.contains('soldes') || userChoice.contains('Soldes')) {
            message = 'üè∑Ô∏è Parfait ! Attendre les soldes √† $price FCFA, c\'est de la patience r√©compens√©e. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu as la m√™me qualit√©. Bravo pour ta patience !';
          }
        } else if (category == TransactionCategory.entertainment) {
          if (userChoice.contains('parc') || userChoice.contains('Parc') || userChoice.contains('public')) {
            message = 'üå≥ Fantastique ! Le parc public √† $price FCFA, c\'est gratuit et super pour se d√©tendre. Tu √©conomises ${nouvelleDepense.toStringAsFixed(0)} FCFA et tu prends l\'air. Parfait pour le moral !';
          } else if (userChoice.contains('√©v√©nement') || userChoice.contains('√âv√©nement') || userChoice.contains('local')) {
            message = 'üéâ Excellente id√©e ! L\'√©v√©nement local √† $price FCFA, c\'est convivial et pas cher. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu rencontres du monde. Super choix !';
          } else if (userChoice.contains('gratuit') || userChoice.contains('Gratuit') || userChoice.contains('0 FCFA')) {
            message = 'üéØ G√©nial ! L\'activit√© gratuite, c\'est parfait pour s\'amuser sans d√©penser. Tu √©conomises ${nouvelleDepense.toStringAsFixed(0)} FCFA et tu passes un bon moment. Tr√®s malin !';
          } else if (userChoice.contains('maison') || userChoice.contains('Maison')) {
            message = 'üè† Brillant ! Les jeux √† la maison √† $price FCFA, c\'est convivial et √©conomique. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA et tu passes du temps en famille. Parfait !';
          }
        } else if (category == TransactionCategory.health) {
          if (userChoice.contains('pharmacie') || userChoice.contains('Pharmacie') || userChoice.contains('populaire')) {
            message = 'üíä Tr√®s bonne d√©cision ! La pharmacie populaire √† $price FCFA, c\'est fiable et abordable. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA sur ta sant√©. C\'est important de prendre soin de soi !';
          } else if (userChoice.contains('mutuelle') || userChoice.contains('Mutuelle')) {
            message = 'üè• Excellente d√©cision ! La mutuelle √† $price FCFA, c\'est une protection intelligente. Tu √©conomises ${economie.toStringAsFixed(0)} FCFA √† long terme. Tr√®s bien pens√© !';
          } else if (userChoice.contains('consultation') || userChoice.contains('Consultation') || userChoice.contains('gratuit')) {
            message = 'üë®‚Äç‚öïÔ∏è Parfait ! La consultation gratuite, c\'est une excellente option. Tu √©conomises ${nouvelleDepense.toStringAsFixed(0)} FCFA et tu prends soin de ta sant√©. Tr√®s malin !';
          }
        } else {
          // Cat√©gorie g√©n√©rique
          message = 'üí° Excellente d√©cision ! Tu √©conomises ${economie.toStringAsFixed(0)} FCFA avec ce choix intelligent. Continue comme √ßa !';
        }
        
        // Actions finales pour TOUS les choix avec prix sp√©cifiques
        options = ['Enregistrer ($price FCFA)', 'Modifier le montant', 'Fermer'];
      } else {
        // Choix g√©n√©rique ‚Üí Plus d'alternatives intelligentes
        if (userChoice.contains('chercher') || userChoice.contains('alternatives') || userChoice.contains('moins cher')) {
          // Proposer plus d'alternatives selon la cat√©gorie
          if (category == TransactionCategory.transport) {
            message = 'üí° Ok, je vois que tu veux optimiser ! Voici d\'autres options sympas :';
            options = ['Taxi (600-1000 FCFA)', 'Moto (500-800 FCFA)', 'Woro-woro (400-700 FCFA)', 'Marcher (0 FCFA)'];
          } else if (category == TransactionCategory.food) {
            message = 'üçΩÔ∏è Pas de souci ! Voici d\'autres options pour bien manger sans se ruiner :';
            options = ['Street food (1000-2000 FCFA)', 'Cantine populaire (800-1500 FCFA)', 'March√© local (500-1200 FCFA)', 'Cuisine maison (300-800 FCFA)'];
          } else if (category == TransactionCategory.shopping) {
            message = 'üõçÔ∏è Bien s√ªr ! Voici comment faire de bonnes affaires :';
            options = ['March√© populaire (√©conomies 40%)', 'Achat en gros (√©conomies 30%)', 'Achat group√© (√©conomies 25%)', 'Attendre les soldes (√©conomies 50%)'];
          } else if (category == TransactionCategory.entertainment) {
            message = 'üéÆ Pas de probl√®me ! Voici des activit√©s sympas qui ne co√ªtent pas cher :';
            options = ['Parc public (0-500 FCFA)', '√âv√©nement local (1000-3000 FCFA)', 'Activit√© gratuite (0 FCFA)', 'Jeux √† la maison (200-1000 FCFA)'];
          } else if (category == TransactionCategory.health) {
            message = 'üè• Bien s√ªr ! Voici comment prendre soin de ta sant√© sans te ruiner :';
            options = ['Pharmacie populaire (√©conomies 30%)', 'Mutuelle (protection long terme)', 'Consultation gratuite (0 FCFA)', 'Pr√©vention (√©conomies 70%)'];
          } else {
            message = 'üí° Pas de souci ! Voici d\'autres alternatives intelligentes :';
            options = ['Comparer les prix', 'N√©gocier', 'Attendre les soldes', 'Achat group√©'];
          }
        } else {
          // Choix g√©n√©rique non reconnu
          message = 'üí° Merci pour cette conversation ! Tu as pris une d√©cision √©clair√©e pour ton budget. Continue comme √ßa !';
          options = ['Enregistrer la transaction', 'Modifier le montant', 'Fermer'];
        }
      }
      
      return {
        'message': message,
        'options': options,
      };
  }

     /// Retourne le nom de la cat√©gorie en fran√ßais
   String _getCategoryName(TransactionCategory category) {
     return CategoryUtils.getCategoryName(category);
   }

   /// Parse la r√©ponse de Gemini en liste de conseils pour le dashboard
   List<String> _parseFinancialTips(String response) {
    final lines = response.split('\n');
     final tips = <String>[];
    
    for (final line in lines) {
      final trimmedLine = line.trim();
      if (trimmedLine.isNotEmpty && 
          (trimmedLine.startsWith('-') || 
           trimmedLine.startsWith('‚Ä¢') || 
           trimmedLine.startsWith('Conseil') ||
           trimmedLine.contains(':'))) {
        
        // Nettoyer le formatage
         String tip = trimmedLine;
         if (tip.startsWith('- ')) tip = tip.substring(2);
         if (tip.startsWith('‚Ä¢ ')) tip = tip.substring(2);
         if (tip.contains(':')) {
           tip = tip.split(':').skip(1).join(':').trim();
         }
         
         if (tip.isNotEmpty) {
           tips.add(tip);
        }
      }
    }
    
    // Si aucun conseil n'a √©t√© trouv√©, traiter la r√©ponse comme un seul conseil
     if (tips.isEmpty && response.trim().isNotEmpty) {
       tips.add(response.trim());
     }
     
     return tips.take(3).toList(); // Limiter √† 3 conseils
  }

  /// Conseils pour le dashboard (version simplifi√©e)
  Future<List<String>> getFinancialTips({
    required double currentBalance,
    required double monthlyBudget,
    required List<TransactionModel> transactions,
  }) async {
    _setLoading(true);
    _clearError();

    try {
      final expenses = transactions.where((t) => t.type == TransactionType.expense).toList();
      final totalExpenses = expenses.fold(0.0, (sum, t) => sum + t.amount);
      final remainingBudget = monthlyBudget - totalExpenses;

      final prompt = '''
Analyse cette situation financi√®re et donne 3 conseils pratiques :

Solde actuel : ${currentBalance.toStringAsFixed(0)} FCFA
Budget mensuel : ${monthlyBudget.toStringAsFixed(0)} FCFA
D√©penses totales : ${totalExpenses.toStringAsFixed(0)} FCFA
Budget restant : ${remainingBudget.toStringAsFixed(0)} FCFA

Donne 3 conseils courts et pratiques en fran√ßais, adapt√©s au contexte ivoirien.
Sois encourageant et utilise des emojis appropri√©s.

Format :
- Conseil 1: [conseil]
- Conseil 2: [conseil]
- Conseil 3: [conseil]
''';

      final response = await _callGemini(prompt);
       // Parser la r√©ponse en liste de conseils
       return _parseFinancialTips(response);
    } catch (e) {
      _setError('Erreur lors de la g√©n√©ration des conseils: $e');
      return _getDefaultFinancialTips(currentBalance, monthlyBudget, transactions);
    } finally {
      _setLoading(false);
    }
  }

  /// Conseils financiers par d√©faut pour le dashboard
  List<String> _getDefaultFinancialTips(
    double currentBalance,
    double monthlyBudget,
    List<TransactionModel> transactions,
  ) {
    final expenses = transactions.where((t) => t.type == TransactionType.expense).toList();
    final totalExpenses = expenses.fold(0.0, (sum, t) => sum + t.amount);
    final remainingBudget = monthlyBudget - totalExpenses;

    final tips = <String>[];

    if (remainingBudget < 0) {
      tips.add('üö® Votre budget est d√©pass√©. Consid√©rez r√©duire vos d√©penses non essentielles ce mois-ci.');
    } else if (remainingBudget < monthlyBudget * 0.2) {
      tips.add('‚ö†Ô∏è Il vous reste peu de budget. Soyez prudent avec vos d√©penses restantes.');
    } else {
      tips.add('‚úÖ Excellent ! Vous g√©rez bien votre budget. Continuez ainsi !');
    }

    final foodExpenses = expenses.where((e) => e.category == TransactionCategory.food).fold(0.0, (sum, e) => sum + e.amount);
    if (foodExpenses > totalExpenses * 0.4) {
      tips.add('üçΩÔ∏è Vous d√©pensez beaucoup en nourriture. Essayez de cuisiner plus √† la maison pour √©conomiser.');
    }

    if (tips.length < 3) {
      tips.add('üí° Pensez √† √©pargner au moins 10% de vos revenus pour vos objectifs futurs.');
    }

    return tips.take(3).toList();
  }

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  void _setError(String error) {
    _error = error;
    notifyListeners();
  }

  void _clearError() {
    _error = null;
    notifyListeners();
  }
}
